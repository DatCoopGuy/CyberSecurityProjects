
#   PYTHON PASSWORD MANAGER PROJECT
#   by Christian Cooper
#__________________________________________________________________________________________
#   Password manager that allows user to:
#       Create an Account
#       Login to Account (admins can login and be sent to special menu with admin controls)
#       Exit
#
#   Admin Users can access special menu and do the following:
#       Check all users in database
#       Change Passwords of Users
#       Delete Users
#       Return to Login
#
#    Security Measures:
#       Checks and verifies users
#       Prevents changing of Admin Account
#       Encrypts password on command line with getpass to prevent echo packet capture
#       Further Encrypts passwords in hash using sha256


#Import Hash library which help encrypt passwords and adding cyber securtity measures
import hashlib
#this helps hide passwords and stops it from echoing on the prompt history otherwise someone could just look at the logs and see like password: 1234 etc
import getpass
#default Admin account and password in this example the "admin" is username and "123" is the password this shows a power user for the example 
password_manager = {"admin": hashlib.sha256("123".encode()).hexdigest()}  # Default admin account


#Login Screen
#This is the Login screen asks the user which action it would like to take: Create an Acount, Login, or Exit out the the software
def main():
    while True:
        choice = input(
            "____________________________________\n"
            "\nWelcome to the E Corp Company Database\n"
            "____________________________________\n"
            "Enter 1 to Create an E Corp account\n"
            "Enter 2 to Login to Company Portal\n"
            "Enter 0 to exit\n"
            "Enter Your Command: "
        )
        
        if choice == "1":
            create_account()
        elif choice == "2":
            login()
        elif choice == "0":
            break
        else:
            print("Invalid choice. Please try again.")



#Following code is used to create company accounts and with complexity to make sure it doesnt use already existing names and saves the password and encrypts it into hash using sha256
def create_account():
    username = input("Enter E Corp Company username for the Account: ")
    #checking if account already exists to provent multiple duplicate usernames
    if username in password_manager:
        print("Username already exists!")
        return
    #makes password and hides the password in getpass then hashes it to stop pesky cyber criminals
    password = getpass.getpass("Enter your desired Password: ")
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    #saves the user and now hashed password into out database
    password_manager[username] = hashed_password
    print("Account has been created successfully!")

#Loging in to the company database, this code checks if the creditials are correct to verify the user. If admin user it will bring them to the special admin menu
def login():
    username = input("Enter your E Corp company Username: ")
    password = getpass.getpass("Enter your password: ")
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    
    if username in password_manager and password_manager[username] == hashed_password:
        print("Login successful!")
        if username == "admin":
            admin_menu()
    else:
        print("Invalid Username or Password")



#admin window
#Admin special menu, this allows the admin to do a variety of things: View all Users, Change passwords, Delete User, Return back to login
def admin_menu():
    while True:
        print("____________________________________\n"
            "\nWelcome E Corp Company Admin Menu\n"
            "____________________________________\n"
            "Please Use the following commands: \n"
            "1. View All Usernames\n"
            "2. Change Password of a User\n"
            "3. Delete a User\n"
            "4. Exit to Login Menu\n")
        choice = input("Enter your choice: ")
        
        if choice == "1":
            view_usernames()
        elif choice == "2":
            change_password()
        elif choice == "3":
            delete_user()
        elif choice == "4":
            break
        else:
            print("Invalid choice. Please try again.")

#This function is used to check all users on account, helps give a role call to see who still has access to the batabase
def view_usernames():
    print("\nRegistered Usernames:")
    for user in password_manager.keys():
        print(user)

#Allows admin to change passwords of Users a common IT job *Sigh*
#Can not delete Admin password this is a security measure to prevent bad actors from kicking out admin
def change_password():
    username = input("Enter the username to change the password: ")
    if username in password_manager and username != "admin":
        new_password = getpass.getpass("Enter new password: ")
        password_manager[username] = hashlib.sha256(new_password.encode()).hexdigest()
        print("Password updated successfully!")
    elif username == "admin":
        print("Admin account passwords can not be changed please contact IT manager!")
    else:
        print("User not found!")

#Allows the Admin to delete users if fired or left company
#Also extra bonus you cant delete the admin
def delete_user():
    username = input("Enter the username to delete: ")
    if username in password_manager and username != "admin":
        del password_manager[username]
        print("User deleted successfully!")
    elif username == "admin":
        print("Admin account cannot be deleted!")
    else:
        print("User not found!")

#while not fully needed just helps keep it in order for now to do login screen first always
if __name__ == "__main__":
    main()
